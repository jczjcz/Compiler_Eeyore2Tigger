Terminals unused in grammar

   MOD
   AND
   OR
   IF
   GOTO
   LABEL
   PARAM
   CALL
   RETURN
   COLON


Grammar

    0 $accept: Program $end

    1 Program: ProgramUnit
    2        | Program ProgramUnit

    3 ProgramUnit: Declaration
    4            | Initialization
    5            | FunctionDef

    6 Declaration: VAR IDENT
    7            | VAR NUM IDENT

    8 Initialization: IDENT ASSIGN NUM
    9               | IDENT LBRAC NUM RBRAC ASSIGN NUM

   10 FunctionDef: FunctionHeader Statements FunctionEnd

   11 FunctionHeader: FUNC LBRAC NUM RBRAC

   12 FunctionEnd: END FUNC

   13 Statements: Statement
   14           | Statements Statement

   15 Statement: Declaration
   16          | Expression

   17 Expression: IDENT ASSIGN RightValue
   18           | IDENT ASSIGN OP RightValue
   19           | IDENT ASSIGN RightValue BinOp RightValue
   20           | IDENT LBRAC RightValue RBRAC ASSIGN RightValue
   21           | IDENT ASSIGN IDENT LBRAC RightValue RBRAC

   22 BinOp: OP
   23      | LOGICOP

   24 OP: NOT
   25   | ADD
   26   | SUB
   27   | MUL
   28   | DIV

   29 LOGICOP: LE
   30        | LEQ
   31        | GE
   32        | GEQ
   33        | EQ
   34        | NEQ

   35 RightValue: IDENT
   36           | NUM


Terminals, with rules where they appear

$end (0) 0
error (256)
ADD (258) 25
SUB (259) 26
MUL (260) 27
DIV (261) 28
MOD (262)
ASSIGN (263) 8 9 17 18 19 20 21
EQ (264) 33
NEQ (265) 34
LE (266) 29
LEQ (267) 30
GE (268) 31
GEQ (269) 32
NOT (270) 24
AND (271)
OR (272)
NUM (273) 7 8 9 11 36
IDENT (274) 6 7 8 9 17 18 19 20 21 35
LBRAC (275) 9 11 20 21
RBRAC (276) 9 11 20 21
IF (277)
GOTO (278)
LABEL (279)
PARAM (280)
CALL (281)
RETURN (282)
COLON (283)
VAR (284) 6 7
FUNC (285) 11 12
END (286) 12


Nonterminals, with rules where they appear

$accept (32)
    on left: 0
Program (33)
    on left: 1 2, on right: 0 2
ProgramUnit (34)
    on left: 3 4 5, on right: 1 2
Declaration (35)
    on left: 6 7, on right: 3 15
Initialization (36)
    on left: 8 9, on right: 4
FunctionDef (37)
    on left: 10, on right: 5
FunctionHeader (38)
    on left: 11, on right: 10
FunctionEnd (39)
    on left: 12, on right: 10
Statements (40)
    on left: 13 14, on right: 10 14
Statement (41)
    on left: 15 16, on right: 13 14
Expression (42)
    on left: 17 18 19 20 21, on right: 16
BinOp (43)
    on left: 22 23, on right: 19
OP (44)
    on left: 24 25 26 27 28, on right: 18 22
LOGICOP (45)
    on left: 29 30 31 32 33 34, on right: 23
RightValue (46)
    on left: 35 36, on right: 17 18 19 20 21


State 0

    0 $accept: . Program $end

    IDENT  shift, and go to state 1
    VAR    shift, and go to state 2
    FUNC   shift, and go to state 3

    Program         go to state 4
    ProgramUnit     go to state 5
    Declaration     go to state 6
    Initialization  go to state 7
    FunctionDef     go to state 8
    FunctionHeader  go to state 9


State 1

    8 Initialization: IDENT . ASSIGN NUM
    9               | IDENT . LBRAC NUM RBRAC ASSIGN NUM

    ASSIGN  shift, and go to state 10
    LBRAC   shift, and go to state 11


State 2

    6 Declaration: VAR . IDENT
    7            | VAR . NUM IDENT

    NUM    shift, and go to state 12
    IDENT  shift, and go to state 13


State 3

   11 FunctionHeader: FUNC . LBRAC NUM RBRAC

    LBRAC  shift, and go to state 14


State 4

    0 $accept: Program . $end
    2 Program: Program . ProgramUnit

    $end   shift, and go to state 15
    IDENT  shift, and go to state 1
    VAR    shift, and go to state 2
    FUNC   shift, and go to state 3

    ProgramUnit     go to state 16
    Declaration     go to state 6
    Initialization  go to state 7
    FunctionDef     go to state 8
    FunctionHeader  go to state 9


State 5

    1 Program: ProgramUnit .

    $default  reduce using rule 1 (Program)


State 6

    3 ProgramUnit: Declaration .

    $default  reduce using rule 3 (ProgramUnit)


State 7

    4 ProgramUnit: Initialization .

    $default  reduce using rule 4 (ProgramUnit)


State 8

    5 ProgramUnit: FunctionDef .

    $default  reduce using rule 5 (ProgramUnit)


State 9

   10 FunctionDef: FunctionHeader . Statements FunctionEnd

    IDENT  shift, and go to state 17
    VAR    shift, and go to state 2

    Declaration  go to state 18
    Statements   go to state 19
    Statement    go to state 20
    Expression   go to state 21


State 10

    8 Initialization: IDENT ASSIGN . NUM

    NUM  shift, and go to state 22


State 11

    9 Initialization: IDENT LBRAC . NUM RBRAC ASSIGN NUM

    NUM  shift, and go to state 23


State 12

    7 Declaration: VAR NUM . IDENT

    IDENT  shift, and go to state 24


State 13

    6 Declaration: VAR IDENT .

    $default  reduce using rule 6 (Declaration)


State 14

   11 FunctionHeader: FUNC LBRAC . NUM RBRAC

    NUM  shift, and go to state 25


State 15

    0 $accept: Program $end .

    $default  accept


State 16

    2 Program: Program ProgramUnit .

    $default  reduce using rule 2 (Program)


State 17

   17 Expression: IDENT . ASSIGN RightValue
   18           | IDENT . ASSIGN OP RightValue
   19           | IDENT . ASSIGN RightValue BinOp RightValue
   20           | IDENT . LBRAC RightValue RBRAC ASSIGN RightValue
   21           | IDENT . ASSIGN IDENT LBRAC RightValue RBRAC

    ASSIGN  shift, and go to state 26
    LBRAC   shift, and go to state 27


State 18

   15 Statement: Declaration .

    $default  reduce using rule 15 (Statement)


State 19

   10 FunctionDef: FunctionHeader Statements . FunctionEnd
   14 Statements: Statements . Statement

    IDENT  shift, and go to state 17
    VAR    shift, and go to state 2
    END    shift, and go to state 28

    Declaration  go to state 18
    FunctionEnd  go to state 29
    Statement    go to state 30
    Expression   go to state 21


State 20

   13 Statements: Statement .

    $default  reduce using rule 13 (Statements)


State 21

   16 Statement: Expression .

    $default  reduce using rule 16 (Statement)


State 22

    8 Initialization: IDENT ASSIGN NUM .

    $default  reduce using rule 8 (Initialization)


State 23

    9 Initialization: IDENT LBRAC NUM . RBRAC ASSIGN NUM

    RBRAC  shift, and go to state 31


State 24

    7 Declaration: VAR NUM IDENT .

    $default  reduce using rule 7 (Declaration)


State 25

   11 FunctionHeader: FUNC LBRAC NUM . RBRAC

    RBRAC  shift, and go to state 32


State 26

   17 Expression: IDENT ASSIGN . RightValue
   18           | IDENT ASSIGN . OP RightValue
   19           | IDENT ASSIGN . RightValue BinOp RightValue
   21           | IDENT ASSIGN . IDENT LBRAC RightValue RBRAC

    ADD    shift, and go to state 33
    SUB    shift, and go to state 34
    MUL    shift, and go to state 35
    DIV    shift, and go to state 36
    NOT    shift, and go to state 37
    NUM    shift, and go to state 38
    IDENT  shift, and go to state 39

    OP          go to state 40
    RightValue  go to state 41


State 27

   20 Expression: IDENT LBRAC . RightValue RBRAC ASSIGN RightValue

    NUM    shift, and go to state 38
    IDENT  shift, and go to state 42

    RightValue  go to state 43


State 28

   12 FunctionEnd: END . FUNC

    FUNC  shift, and go to state 44


State 29

   10 FunctionDef: FunctionHeader Statements FunctionEnd .

    $default  reduce using rule 10 (FunctionDef)


State 30

   14 Statements: Statements Statement .

    $default  reduce using rule 14 (Statements)


State 31

    9 Initialization: IDENT LBRAC NUM RBRAC . ASSIGN NUM

    ASSIGN  shift, and go to state 45


State 32

   11 FunctionHeader: FUNC LBRAC NUM RBRAC .

    $default  reduce using rule 11 (FunctionHeader)


State 33

   25 OP: ADD .

    $default  reduce using rule 25 (OP)


State 34

   26 OP: SUB .

    $default  reduce using rule 26 (OP)


State 35

   27 OP: MUL .

    $default  reduce using rule 27 (OP)


State 36

   28 OP: DIV .

    $default  reduce using rule 28 (OP)


State 37

   24 OP: NOT .

    $default  reduce using rule 24 (OP)


State 38

   36 RightValue: NUM .

    $default  reduce using rule 36 (RightValue)


State 39

   21 Expression: IDENT ASSIGN IDENT . LBRAC RightValue RBRAC
   35 RightValue: IDENT .

    LBRAC  shift, and go to state 46

    $default  reduce using rule 35 (RightValue)


State 40

   18 Expression: IDENT ASSIGN OP . RightValue

    NUM    shift, and go to state 38
    IDENT  shift, and go to state 42

    RightValue  go to state 47


State 41

   17 Expression: IDENT ASSIGN RightValue .
   19           | IDENT ASSIGN RightValue . BinOp RightValue

    ADD  shift, and go to state 33
    SUB  shift, and go to state 34
    MUL  shift, and go to state 35
    DIV  shift, and go to state 36
    EQ   shift, and go to state 48
    NEQ  shift, and go to state 49
    LE   shift, and go to state 50
    LEQ  shift, and go to state 51
    GE   shift, and go to state 52
    GEQ  shift, and go to state 53
    NOT  shift, and go to state 37

    $default  reduce using rule 17 (Expression)

    BinOp    go to state 54
    OP       go to state 55
    LOGICOP  go to state 56


State 42

   35 RightValue: IDENT .

    $default  reduce using rule 35 (RightValue)


State 43

   20 Expression: IDENT LBRAC RightValue . RBRAC ASSIGN RightValue

    RBRAC  shift, and go to state 57


State 44

   12 FunctionEnd: END FUNC .

    $default  reduce using rule 12 (FunctionEnd)


State 45

    9 Initialization: IDENT LBRAC NUM RBRAC ASSIGN . NUM

    NUM  shift, and go to state 58


State 46

   21 Expression: IDENT ASSIGN IDENT LBRAC . RightValue RBRAC

    NUM    shift, and go to state 38
    IDENT  shift, and go to state 42

    RightValue  go to state 59


State 47

   18 Expression: IDENT ASSIGN OP RightValue .

    $default  reduce using rule 18 (Expression)


State 48

   33 LOGICOP: EQ .

    $default  reduce using rule 33 (LOGICOP)


State 49

   34 LOGICOP: NEQ .

    $default  reduce using rule 34 (LOGICOP)


State 50

   29 LOGICOP: LE .

    $default  reduce using rule 29 (LOGICOP)


State 51

   30 LOGICOP: LEQ .

    $default  reduce using rule 30 (LOGICOP)


State 52

   31 LOGICOP: GE .

    $default  reduce using rule 31 (LOGICOP)


State 53

   32 LOGICOP: GEQ .

    $default  reduce using rule 32 (LOGICOP)


State 54

   19 Expression: IDENT ASSIGN RightValue BinOp . RightValue

    NUM    shift, and go to state 38
    IDENT  shift, and go to state 42

    RightValue  go to state 60


State 55

   22 BinOp: OP .

    $default  reduce using rule 22 (BinOp)


State 56

   23 BinOp: LOGICOP .

    $default  reduce using rule 23 (BinOp)


State 57

   20 Expression: IDENT LBRAC RightValue RBRAC . ASSIGN RightValue

    ASSIGN  shift, and go to state 61


State 58

    9 Initialization: IDENT LBRAC NUM RBRAC ASSIGN NUM .

    $default  reduce using rule 9 (Initialization)


State 59

   21 Expression: IDENT ASSIGN IDENT LBRAC RightValue . RBRAC

    RBRAC  shift, and go to state 62


State 60

   19 Expression: IDENT ASSIGN RightValue BinOp RightValue .

    $default  reduce using rule 19 (Expression)


State 61

   20 Expression: IDENT LBRAC RightValue RBRAC ASSIGN . RightValue

    NUM    shift, and go to state 38
    IDENT  shift, and go to state 42

    RightValue  go to state 63


State 62

   21 Expression: IDENT ASSIGN IDENT LBRAC RightValue RBRAC .

    $default  reduce using rule 21 (Expression)


State 63

   20 Expression: IDENT LBRAC RightValue RBRAC ASSIGN RightValue .

    $default  reduce using rule 20 (Expression)
